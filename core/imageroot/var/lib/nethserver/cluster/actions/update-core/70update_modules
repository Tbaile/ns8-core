#!/usr/bin/env python3

#
# Copyright (C) 2024 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import agent
import agent.tasks
import sys, os
import cluster.modules

request = json.load(sys.stdin)
force_update = request.get("force", False)
agent_install_dir = os.environ["AGENT_INSTALL_DIR"]

agent.run_helper("run-scriptdir", f"{agent_install_dir}/update-core-pre-modules.d/")

rdb = agent.redis_connect(privileged=True)

# Update all core modules
instances = dict()
for oimage in cluster.modules.list_core_modules(rdb):
    image_id = oimage['name']
    if image_id == 'core':
        continue # skip core: it is handled by another action step

    # Prepare a list of module instances that need the update
    module_instances = [oinstance['id'] for oinstance in oimage['instances'] if oinstance['update']]

    if len(module_instances) > 0: # must be not empty
        instances[image_id] = {
            'url': cluster.modules.get_latest_module(image_id, rdb),
            'instances': module_instances,
        }

update_module_tasks = []
for mid in instances.keys():
    update_module_tasks.append({
        'agent_id': 'cluster',
        "action": "update-module",
        "data": {
            "module_url": instances[mid]['url'],
            "instances":  instances[mid]['instances'],
            "force": force_update,
        }
    })

update_module_errors = agent.tasks.runp_brief(update_module_tasks,
    endpoint = "redis://cluster-leader",
    progress_callback=agent.get_progress_callback(75, 95),
)

agent.run_helper("run-scriptdir", f"{agent_install_dir}/update-core-post-modules.d/")

agent.assert_exp(update_module_errors == 0, 'update-core failed in some core modules')
